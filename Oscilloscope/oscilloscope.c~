#include <stdio.h>    /* Standard input/output definitions */
#include <stdlib.h> 
#include <stdint.h>   /* Standard types */
#include <string.h>   /* String function definitions */
#include <unistd.h>   /* UNIX standard function definitions */
#include <fcntl.h>    /* File control definitions */
#include <errno.h>    /* Error number definitions */
#include <termios.h>  /* POSIX terminal control definitions */
#include <sys/ioctl.h>
#include <getopt.h>

int serialport_writebyte( int fd, uint8_t b)
{
    int n = write(fd,&b,1);
    if( n!=1)
        return -1;
    return 0;
}

int serialport_write(int fd, const char* str)
{
    int len = strlen(str);
    int n = write(fd, str, len);
    if( n!=len ) 
        return -1;
    return 0;
}

int serialport_read_forever(int fd)
{
  char b[1],c[1];
  int val,val2,i=0;
  do { 
    int n = read(fd, &val, 4);  // read a char at a time
    if( n==-1) return -1;    // couldn't read
    if( n==0 ) {
      usleep( 10 * 1000 ); // wait 10 msec try again
      continue;
    }
    printf("%d %d\n",i++, val);
    //    if (val == 0xff) {
    //      n = read(fd,&val,1);
    //      val = val << 8;
    //      n = read(fd,&val2,1);
    //      int val = val | val2;
    //    }
  } while( 1 != 2 );
  return 0;
}

// takes the string name of the serial port (e.g. "/dev/tty.usbserial","COM1")
// and a baud rate (bps) and connects to that port at that speed and 8N1.
// opens the port in fully raw mode so you can send binary data.
// returns valid fd, or -1 on error
int serialport_init(const char* serialport, int baud)
{
    struct termios toptions;
    int fd;
    
    fprintf(stderr,"init_serialport: opening port %s @ %d bps\n",
            serialport,baud);

    fd = open(serialport, O_RDWR | O_NOCTTY | O_NDELAY);
    if (fd == -1)  {
        perror("init_serialport: Unable to open port ");
        return -1;
    }
    
    if (tcgetattr(fd, &toptions) < 0) {
        perror("init_serialport: Couldn't get term attributes");
        return -1;
    }
    speed_t brate = baud; // let you override switch below if needed
    switch(baud) {
    case 4800:   brate=B4800;   break;
    case 9600:   brate=B9600;   break;
#ifdef B14400
    case 14400:  brate=B14400;  break;
#endif
    case 19200:  brate=B19200;  break;
#ifdef B28800
    case 28800:  brate=B28800;  break;
#endif
    case 38400:  brate=B38400;  break;
    case 57600:  brate=B57600;  break;
    case 115200: brate=B115200; break;
    }
    cfsetispeed(&toptions, brate);
    cfsetospeed(&toptions, brate);

    // 8N1
    toptions.c_cflag &= ~PARENB;
    toptions.c_cflag &= ~CSTOPB;
    toptions.c_cflag &= ~CSIZE;
    toptions.c_cflag |= CS8;
    // no flow control
    toptions.c_cflag &= ~CRTSCTS;

    toptions.c_cflag |= CREAD | CLOCAL;  // turn on READ & ignore ctrl lines
    toptions.c_iflag &= ~(IXON | IXOFF | IXANY); // turn off s/w flow ctrl

    toptions.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG); // make raw
    toptions.c_oflag &= ~OPOST; // make raw

    // see: http://unixwiz.net/techtips/termios-vmin-vtime.html
    toptions.c_cc[VMIN]  = 0;
    toptions.c_cc[VTIME] = 20;
    
    if( tcsetattr(fd, TCSANOW, &toptions) < 0) {
        perror("init_serialport: Couldn't set term attributes");
        return -1;
    }

    return fd;
}

int main(int argc, char *argv[]) 
{
  int fd = 0;
  char serialport[256];
  int baudrate = B9600;  // default
  char buf[256];
  int rc,n;
    
  static struct option loptions[] = {
    {"help",       no_argument,       0, 'h'},
    {"port",       required_argument, 0, 'p'},
    {"baud",       required_argument, 0, 'b'},
    {"send",       required_argument, 0, 's'},
    {"receive",    no_argument,       0, 'r'},
    {"num",        required_argument, 0, 'n'},
    {"delay",      required_argument, 0, 'd'}
  };
  while(1) {
    int option_index = 0, opt;
    opt = getopt_long (argc, argv, "p:",
		       loptions, &option_index);
    if (opt==-1) break;
    switch (opt) {
    case '0': break;
    case 'p':
      strcpy(serialport,optarg);
      printf("Initializing port: %s %d\n",optarg,9600);
      fd = serialport_init(optarg, 9600);
      if(fd==-1) return -1;
      printf("Initialized port which is called %d",fd);
      usleep(3000 * 1000 ); // sleep milliseconds
      break;
    }
  }
  
  serialport_read_forever(fd);
}
